# Higher Order Function:
------------------------
A Higher Order function is a function, which is capable of doing any one of the following things:
 -> It can be functioned as a data and be assigned to a variable.
 -> It can accept any other function as an argument.
 -> It can return a function as its result.
 -> The ability to build Higher order functions, allows a programmer to create Closures, which in turn are used to 
    create Decorators.

    Eg-1: Function as a Data
    def greet():
        return 'Hello Everyone!'
    
    print(greet())
    wish = greet        # 'greet' function assigned to variable 'wish'
    print(type(wish))   
    print(wish())

    O/P:
    Hello Everyone!
    <type 'function'>
    Hello Everyone!
    --------------------------------------------------------------------

    Eg-2: Function as an Argument
    def add(x, y):
    return x + y

    def sub(x, y):
        return x - y
    
    def prod(x, y):
        return x * y
    
    def do(func, x, y):
        return func(x, y)
    
    print(do(add, 12, 4))  # 'add' as arg
    print(do(sub, 12, 4))  # 'sub' as arg
    print(do(prod, 12, 4)  # 'prod' as arg

    O/P:
    16
    8
    48
    -----------------------------------------------------------

    Eg-3_1: Returning a Function
    def outer():
        def inner():
            s = 'Hello world!'
            return s            
    
        return inner()    
    
    print(outer())

    O/P:
    Hello world!

    ---------------------------------------------------------------
    
    Eg-3_2: Returning a Function
    def outer():
        def inner():
            s = 'Hello world!'
            return s            
    
        return inner   # Removed '()' to return 'inner' function itself
    
    print(outer()) #returns 'inner' function
    func = outer() 
    print(type(func))
    print(func()) # calling 'inner' function

    O/P:
    <function inner at 0xxxxxx>
    <type 'function'>
    Hello world!

    -----------------------------------------------------------------------------


# Closures:
-----------
-> A Closure is a function returned by a higher order function, whose return value depends on the data associated 
   with the higher order function.

    Eg:
    def multiple_of(x):

        def multiple(y):
            return x*y
    
        return multiple
    
    c1 = multiple_of(5)  # 'c1' is a closure
    c2 = multiple_of(6)  # 'c2' is a closure
    
    print(c1(4))
    print(c2(4))
    
    O/P:
    20
    24
    
    
# Decorator:
------------
-> Decorators are evolved from the concept of closures.
-> A decorator function is a higher order function that takes a function as an argument and returns the inner 
   function.
-> A decorator is capable of adding extra functionality to an existing function, without altering it.
-> The decorator function is prefixed with @ symbol and written above the function definition.

    Eg:
    @outer
    def greet():
       pass
    ------------------------------------
    Eg-1: wish is the closure function
    def outer(func):
        def inner():
            print("Accessing :", func.__name__)
            return func()
    
        return inner
    
    def greet():
        return 'Hello!'
    
    wish = outer(greet)
    
    wish()
    
    O/P:
    Accessing : greet
    Hello!
    ----------------------------------------
    Eg-2: decorating 'greet'
    def outer(func):
        def inner():
            print("Accessing :", func.__name__)
            return func()
    
        return inner
    
    def greet():
        return 'Hello!'
    
    greet = outer(greet) # decorating 'greet'
    
    greet()  # calling new 'greet'
    
    O/P:
    Accessing : greet
    ---------------------------------------------------------------
    Eg-3: greet = outer(greet) expression is same as @outer
    def outer(func):
        def inner():
            print("Accessing :", func.__name__)
            return func()
    
        return inner
    
    @outer
    def greet():
        return 'Hello!'
    
    greet()
    
    O/P:
    Accessing : greet
    ------------------------------------------------------------------


# Descriptors:
--------------
-> Python descriptors allow a programmer to create managed attributes.
-> In other object-oriented languages, you will find getter and setter methods to manage attributes.
-> However, Python allows a programmer to manage the attributes simply with the attribute name, without 
   losing their protection.
-> This is achieved by defining a descriptor class, that implements any of __get__, __set__, __delete__ methods.

    Eg:
    class EmpNameDescriptor:
        def __get__(self, obj, owner):
            return self.__empname

        def __set__(self, obj, value):
            if not isinstance(value, str):  -----> It checks if the value of empname attribute is a string or not.
                raise TypeError("'empname' must be a string.")
            self.__empname = value


    class EmpIdDescriptor:
        def __get__(self, obj, owner):
            return self.__empid
    
        def __set__(self, obj, value):
            if hasattr(obj, 'empid'):
                raise ValueError("'empid' is read only attribute")
            if not isinstance(value, int):
                raise TypeError("'empid' must be an integer.")
            self.__empid = value


    class Employee:
        empid = EmpIdDescriptor()           
        empname = EmpNameDescriptor()       
    
        def __init__(self, emp_id, emp_name):
            self.empid = emp_id
            self.empname = emp_name


    e1 = Employee(123456, 'John')
    print(e1.empid, '-', e1.empname)  
    
    e1.empname = 'Williams'
    print(e1.empid, '-', e1.empname)
    
    e1.empid = 76347322

    Note: when executing the expression e1.empid = 76347322, the __set__ method defined in EmpIdDescriptor 
          is executed and raises "ValueError: 'empid' is read only attribute".
-------------------------------------------------------------------------------------------------------------


# Properties:
-------------
-> Descriptors can also be created using property() type.
-> It is easy to create a descriptor for any attribute using property().

    Syntax:
    property(fget=None, fset=None, fdel=None, doc=None)


    Eg-1:
    class Employee:

        def __init__(self, emp_id, emp_name):
            self.empid = emp_id
            self.empname = emp_name
    
        def getEmpID(self):
            return self.__empid
    
        def setEmpID(self, value):
            if not isinstance(value, int):
                raise TypeError("'empid' must be an integer.")
            self.__empid = value
    
        empid = property(getEmpID, setEmpID)    -----> empid attribute created using property.


   
    def getEmpName(self):
        return self.__empname

    def setEmpName(self, value):
        if not isinstance(value, str):
            raise TypeError("empname' must be a string.")
        self.__empname = value

    def delEmpName(self):
        del self.__empname

    empname = property(getEmpName, setEmpName, delEmpName)


    Note: empname attribute created using property. It is deleted when delEmpName method is called.


    e1 = Employee(123456, 'John')
    print(e1.empid, '-', e1.empname)    # -> '123456 - John'
    del e1.empname    # Deletes 'empname'
    print(e1.empname) #Raises 'AttributeError'


    O/P:
    123456 - John
    AttributeError: ...


# Property Decorators:
----------------------
-> Descriptors can also be created with property decorators.
-> While using property decorators, an attribute's get method will be same as its name and will be decorated with property.
-> In a case of defining any set or delete methods, they will be decorated with respective setter and deleter methods.

    Eg:
    class Employee:

        def __init__(self, emp_id, emp_name):
            self.empid = emp_id
            self.empname = emp_name
    
        @property
        def empid(self):
            return self.__empid
    
        @empid.setter
        def empid(self, value):
            if not isinstance(value, int):
                raise TypeError("'empid' must be an integer.")
            self.__empid = value


    Note: get and set methods of empid attribute are decorated with property.

        @property
        def empname(self):
            return self.__empname
    
        @empname.setter
        def empname(self, value):
            if not isinstance(value, str):
                raise TypeError("'empname' must be a string.")
            self.__empname = value
    
        @empname.deleter
        def empname(self):
            del self.__empname



    e1 = Employee(123456, 'John')
    print(e1.empid, '-', e1.empname)    # -> '123456 - John'
    del e1.empname    # Deletes 'empname'
    print(e1.empname) #Raises 'AttributeError'



# Class Methods:
----------------
-> A method defined inside a class is bound to its object, by default.
-> However, if the method is bound to a Class, then it is known as classmethod.


    Eg-1: Not a class method
    class Circle(object):

        no_of_circles = 0
    
        def __init__(self, radius):
            self.__radius = radius
            Circle.no_of_circles += 1
    
        def getCirclesCount(self):
            return Circle.no_of_circles
    
    c1 = Circle(3.5)
    c2 = Circle(5.2)
    c3 = Circle(4.8)
    
    print(c1.getCirclesCount())     # -> 3
    print(c2.getCirclesCount())     # -> 3
    print(Circle.getCirclesCount(c3)) # -> 3
    print(Circle.getCirclesCount()) # -> TypeError



    Eg-2: Class methods
    class Circle(object):

        no_of_circles = 0
    
        def __init__(self, radius):
            self.__radius = radius
            Circle.no_of_circles += 1
    
        @classmethod
        def getCirclesCount(self):
            return Circle.no_of_circles
    
    c1 = Circle(3.5)
    c2 = Circle(5.2)
    c3 = Circle(4.8)



# Static Method:
----------------
-> A method defined inside a class and not bound to either a class or an object is known as Static Method.
-> Decorating a method using @staticmethod decorator makes it a static method.
-> We can access the static method using Class or the Object.

    Eg:
    class Circle(object):

        def __init__(self, radius):
            self.__radius = radius
    
        @staticmethod
        def square(x):
            return x**2
    
        def area(self):
            return 3.14*self.square(self.__radius)
    
    c1 = Circle(3.9)
    print(c1.area())  
    print(square(10)) # -> NameError

    print(Circle.square(10)) # -> 100
    print(c1.square(10))     # -> 100
--------------------------------------------------------------------------------------------------------


# Abstract Base Classes:
------------------------
-> An Abstract Base Class or ABC mandates the derived classes to implement specific methods from the base class.
-> It is not possible to create an object from a defined ABC class.
-> Creating objects of derived classes is possible only when derived classes override existing functionality of all abstract 
   methods defined in an ABC class.

-> In Python, an Abstract Base Class can be created using module abc.

    Eg:
    from abc import ABC, abstractmethod

    class Shape(ABC):
    
        @abstractmethod
        def area(self):
            pass
    
        @abstractmethod
        def perimeter(self):
            pass


    s1 = Shape() #--> TypeError
    ------------------------------------
    class Circle(Shape):

        def __init__(self, radius):
            self.__radius = radius
    
        @staticmethod
        def square(x):
            return x**2
    
        def area(self):
            return 3.14*self.square(self.__radius)
    
    c1 = Circle(3.9)

    O/P: TypeError [we didn't override ABC's method]
    ------------------------------------------------

    class Circle(Shape):

        def __init__(self, radius):
            self.__radius = radius
    
        @staticmethod
        def square(x):
            return x**2
    
        def area(self):
            return 3.14*self.square(self.__radius)
    
        def perimeter(self):
            return 2*3.14*self.__radius
    
    c1 = Circle(3.9)
    print(c1.area())

    O/P:
    47.7594
    ---------------------------------------------------



# Context Manager:
------------------
-> A Context Manager allows a programmer to perform required activities, automatically, while entering or exiting a Context.

For example, opening a file, doing few file operations, and closing the file is manged using Context Manager as shown below.
    Eg-1:
    with open('sample.txt', 'w') as fp:
    content = fp.read()

    Note: The keyword with is used in Python to enable a context manager. It automatically takes care of closing the file.


    Eg-2:
    import sqlite3

    class DbConnect(object):
    
        def __init__(self, dbname):
            self.dbname = dbname
    
        def __enter__(self):
            self.dbConnection = sqlite3.connect(self.dbname)
            return self.dbConnection
    
        def __exit__(self, exc_type, exc_val, exc_tb):
            self.dbConnection.close()
    
    with DbConnect('TEST.db') as db:
        cursor = db.cursor()
        '''
        Few db operations
        ...
        '''


# Coroutines:
-------------
-> A Coroutine is generator which is capable of constantly receiving input data, process input data and may or 
   may not return any output.
-> Coroutines are majorly used to build better Data Processing Pipelines.
-> Similar to a generator, execution of a coroutine stops when it reaches yield statement.
-> A Coroutine uses send method to send any input value, which is captured by yield expression.


    Eg-1:
    def TokenIssuer():
        tokenId = 0
        while True:
            name = yield
            tokenId += 1
            print('Token number of', name, ':', tokenId)
    
    
    t = TokenIssuer()
    
    next(t)
    
    t.send('George')
    t.send('Rosy')
    t.send('Smith')

    Note: TokenIssuer is a coroutine function, which uses yield to accept name as input.

    O/P:
    Token number of George: 1
    Token number of Rosy: 2
    Token number of Smith: 3

    -> Execution of coroutine function begins only when next is called on coroutine t.
    -> This results in the execution of all the statements till a yield statement is encountered.
    -> Further execution of function resumes when an input is passed using send, and processes all statements till next 
       yield statement.
    -----------------------------------------------------------------------------------------------

    Eg-2:
    def TokenIssuer(tokenId=0):
        try:
            while True:
                name = yield
                tokenId += 1
                print('Token number of', name, ':', tokenId)
        except GeneratorExit:
            print('Last issued Token is :', tokenId)
    
    
    t = TokenIssuer(100)
    
    next(t)
    
    t.send('George')
    t.send('Rosy')
    t.send('Smith')
    t.close()
    
    -> When coroutine t is closed, statements under GeneratorExit block are executed.
    -------------------------------------------------------------------------------------------------

    Eg-3: Taking care of next(t) statement bcoz many programmer forget to use that.
    def coroutine_decorator(func):
        def wrapper(*args, **kwdargs):
            c = func(*args, **kwdargs)
            next(c)
            return c
        return wrapper    

    @coroutine_decorator
    def TokenIssuer(tokenId=0):
        try:
            while True:
                name = yield
                tokenId += 1
                print('Token number of', name, ':', tokenId)
        except GeneratorExit:
            print('Last issued Token is :', tokenId)
    
    t = TokenIssuer(100)
    
    t.send('George')
    t.send('Rosy')
    t.send('Smith')
    t.close()












